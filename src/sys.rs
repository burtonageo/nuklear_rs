#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(non_camel_case_types, non_snake_case)]

/* automatically generated by rust-bindgen */

pub type nk_byte = ::std::os::raw::c_uchar;
pub type nk_short = ::std::os::raw::c_short;
pub type nk_ushort = ::std::os::raw::c_ushort;
pub type nk_int = ::std::os::raw::c_short;
pub type nk_uint = ::std::os::raw::c_ushort;
pub type nk_size = ::std::os::raw::c_ulong;
pub type nk_ptr = ::std::os::raw::c_ulong;
pub type nk_hash = ::std::os::raw::c_uint;
pub type nk_flags = ::std::os::raw::c_uint;
pub type nk_rune = nk_uint;
pub enum Struct_nk_draw_command { }
pub enum Struct_nk_draw_list { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 { nk_false = 0, nk_true = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_color {
    pub r: nk_byte,
    pub g: nk_byte,
    pub b: nk_byte,
    pub a: nk_byte,
}
impl ::std::clone::Clone for Struct_nk_color {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_color {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_vec2 {
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_nk_vec2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_vec2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_vec2i {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for Struct_nk_vec2i {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_vec2i {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_rect {
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
    pub w: ::std::os::raw::c_float,
    pub h: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_nk_rect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_recti {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for Struct_nk_recti {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_recti {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nk_glyph = [::std::os::raw::c_char; 4usize];
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed2 {
    pub unsafe fn ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn id(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nk_handle = Union_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_image {
    pub handle: nk_handle,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub region: [::std::os::raw::c_ushort; 4usize],
}
impl ::std::clone::Clone for Struct_nk_image {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_scroll {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_nk_scroll {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_scroll {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_heading {
    NK_UP = 0,
    NK_RIGHT = 1,
    NK_DOWN = 2,
    NK_LEFT = 3,
}
pub type nk_filter =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const Struct_nk_text_edit,
                                               unicode: nk_rune)
                              -> ::std::os::raw::c_int>;
pub type nk_paste_f =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               arg2:
                                                   *mut Struct_nk_text_edit)>;
pub type nk_copy_f =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               arg2:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_int)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_button_behavior {
    NK_BUTTON_DEFAULT = 0,
    NK_BUTTON_REPEATER = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_modify { NK_FIXED = 0, NK_MODIFIABLE = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_orientation { NK_VERTICAL = 0, NK_HORIZONTAL = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_collapse_states { NK_MINIMIZED = 0, NK_MAXIMIZED = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_show_states { NK_HIDDEN = 0, NK_SHOWN = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_chart_type {
    NK_CHART_LINES = 0,
    NK_CHART_COLUMN = 1,
    NK_CHART_MAX = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_chart_event { NK_CHART_HOVERING = 1, NK_CHART_CLICKED = 2, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_color_format { NK_RGB = 0, NK_RGBA = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_popup_type { NK_POPUP_STATIC = 0, NK_POPUP_DYNAMIC = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_layout_format { NK_DYNAMIC = 0, NK_STATIC = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_tree_type { NK_TREE_NODE = 0, NK_TREE_TAB = 1, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_anti_aliasing {
    NK_ANTI_ALIASING_OFF = 0,
    NK_ANTI_ALIASING_ON = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_allocator {
    pub userdata: nk_handle,
    pub alloc: ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                                          old:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: nk_size)
                                         -> *mut ::std::os::raw::c_void>,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                                         arg2:
                                                             *mut ::std::os::raw::c_void)>,
}
impl ::std::clone::Clone for Struct_nk_allocator {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_allocator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_draw_null_texture {
    pub texture: nk_handle,
    pub uv: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_draw_null_texture {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_draw_null_texture {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_convert_config {
    pub global_alpha: ::std::os::raw::c_float,
    pub line_AA: Enum_nk_anti_aliasing,
    pub shape_AA: Enum_nk_anti_aliasing,
    pub circle_segment_count: ::std::os::raw::c_uint,
    pub arc_segment_count: ::std::os::raw::c_uint,
    pub curve_segment_count: ::std::os::raw::c_uint,
    pub null: Struct_nk_draw_null_texture,
}
impl ::std::clone::Clone for Struct_nk_convert_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_convert_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_symbol_type {
    NK_SYMBOL_NONE = 0,
    NK_SYMBOL_X = 1,
    NK_SYMBOL_UNDERSCORE = 2,
    NK_SYMBOL_CIRCLE = 3,
    NK_SYMBOL_CIRCLE_FILLED = 4,
    NK_SYMBOL_RECT = 5,
    NK_SYMBOL_RECT_FILLED = 6,
    NK_SYMBOL_TRIANGLE_UP = 7,
    NK_SYMBOL_TRIANGLE_DOWN = 8,
    NK_SYMBOL_TRIANGLE_LEFT = 9,
    NK_SYMBOL_TRIANGLE_RIGHT = 10,
    NK_SYMBOL_PLUS = 11,
    NK_SYMBOL_MINUS = 12,
    NK_SYMBOL_MAX = 13,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_keys {
    NK_KEY_NONE = 0,
    NK_KEY_SHIFT = 1,
    NK_KEY_CTRL = 2,
    NK_KEY_DEL = 3,
    NK_KEY_ENTER = 4,
    NK_KEY_TAB = 5,
    NK_KEY_BACKSPACE = 6,
    NK_KEY_COPY = 7,
    NK_KEY_CUT = 8,
    NK_KEY_PASTE = 9,
    NK_KEY_UP = 10,
    NK_KEY_DOWN = 11,
    NK_KEY_LEFT = 12,
    NK_KEY_RIGHT = 13,
    NK_KEY_TEXT_INSERT_MODE = 14,
    NK_KEY_TEXT_LINE_START = 15,
    NK_KEY_TEXT_LINE_END = 16,
    NK_KEY_TEXT_START = 17,
    NK_KEY_TEXT_END = 18,
    NK_KEY_TEXT_UNDO = 19,
    NK_KEY_TEXT_REDO = 20,
    NK_KEY_TEXT_WORD_LEFT = 21,
    NK_KEY_TEXT_WORD_RIGHT = 22,
    NK_KEY_MAX = 23,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_buttons {
    NK_BUTTON_LEFT = 0,
    NK_BUTTON_MIDDLE = 1,
    NK_BUTTON_RIGHT = 2,
    NK_BUTTON_MAX = 3,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_style_colors {
    NK_COLOR_TEXT = 0,
    NK_COLOR_WINDOW = 1,
    NK_COLOR_HEADER = 2,
    NK_COLOR_BORDER = 3,
    NK_COLOR_BUTTON = 4,
    NK_COLOR_BUTTON_HOVER = 5,
    NK_COLOR_BUTTON_ACTIVE = 6,
    NK_COLOR_TOGGLE = 7,
    NK_COLOR_TOGGLE_HOVER = 8,
    NK_COLOR_TOGGLE_CURSOR = 9,
    NK_COLOR_SELECT = 10,
    NK_COLOR_SELECT_ACTIVE = 11,
    NK_COLOR_SLIDER = 12,
    NK_COLOR_SLIDER_CURSOR = 13,
    NK_COLOR_SLIDER_CURSOR_HOVER = 14,
    NK_COLOR_SLIDER_CURSOR_ACTIVE = 15,
    NK_COLOR_PROPERTY = 16,
    NK_COLOR_EDIT = 17,
    NK_COLOR_EDIT_CURSOR = 18,
    NK_COLOR_COMBO = 19,
    NK_COLOR_CHART = 20,
    NK_COLOR_CHART_COLOR = 21,
    NK_COLOR_CHART_COLOR_HIGHLIGHT = 22,
    NK_COLOR_SCROLLBAR = 23,
    NK_COLOR_SCROLLBAR_CURSOR = 24,
    NK_COLOR_SCROLLBAR_CURSOR_HOVER = 25,
    NK_COLOR_SCROLLBAR_CURSOR_ACTIVE = 26,
    NK_COLOR_TAB_HEADER = 27,
    NK_COLOR_COUNT = 28,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_widget_layout_states {
    NK_WIDGET_INVALID = 0,
    NK_WIDGET_VALID = 1,
    NK_WIDGET_ROM = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_widget_states {
    NK_WIDGET_STATE_INACTIVE = 1,
    NK_WIDGET_STATE_ENTERED = 2,
    NK_WIDGET_STATE_HOVERED = 4,
    NK_WIDGET_STATE_LEFT = 8,
    NK_WIDGET_STATE_ACTIVE = 16,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_text_align {
    NK_TEXT_ALIGN_LEFT = 1,
    NK_TEXT_ALIGN_CENTERED = 2,
    NK_TEXT_ALIGN_RIGHT = 4,
    NK_TEXT_ALIGN_TOP = 8,
    NK_TEXT_ALIGN_MIDDLE = 16,
    NK_TEXT_ALIGN_BOTTOM = 32,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_text_alignment {
    NK_TEXT_LEFT = 17,
    NK_TEXT_CENTERED = 18,
    NK_TEXT_RIGHT = 20,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_edit_flags {
    NK_EDIT_DEFAULT = 0,
    NK_EDIT_READ_ONLY = 1,
    NK_EDIT_AUTO_SELECT = 2,
    NK_EDIT_SIG_ENTER = 4,
    NK_EDIT_ALLOW_TAB = 8,
    NK_EDIT_NO_CURSOR = 16,
    NK_EDIT_SELECTABLE = 32,
    NK_EDIT_CLIPBOARD = 64,
    NK_EDIT_CTRL_ENTER_NEWLINE = 128,
    NK_EDIT_NO_HORIZONTAL_SCROLL = 256,
    NK_EDIT_ALWAYS_INSERT_MODE = 512,
    NK_EDIT_MULTILINE = 2048,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_edit_types {
    NK_EDIT_SIMPLE = 512,
    NK_EDIT_FIELD = 544,
    NK_EDIT_BOX = 2600,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_edit_events {
    NK_EDIT_ACTIVE = 1,
    NK_EDIT_INACTIVE = 2,
    NK_EDIT_ACTIVATED = 4,
    NK_EDIT_DEACTIVATED = 8,
    NK_EDIT_COMMITED = 16,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_panel_flags {
    NK_WINDOW_BORDER = 1,
    NK_WINDOW_BORDER_HEADER = 2,
    NK_WINDOW_MOVABLE = 4,
    NK_WINDOW_SCALABLE = 8,
    NK_WINDOW_CLOSABLE = 16,
    NK_WINDOW_MINIMIZABLE = 32,
    NK_WINDOW_DYNAMIC = 64,
    NK_WINDOW_NO_SCROLLBAR = 128,
    NK_WINDOW_TITLE = 256,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_memory_status {
    pub memory: *mut ::std::os::raw::c_void,
    pub _type: ::std::os::raw::c_uint,
    pub size: nk_size,
    pub allocated: nk_size,
    pub needed: nk_size,
    pub calls: nk_size,
}
impl ::std::clone::Clone for Struct_nk_memory_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_memory_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_allocation_type {
    NK_BUFFER_FIXED = 0,
    NK_BUFFER_DYNAMIC = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_buffer_allocation_type {
    NK_BUFFER_FRONT = 0,
    NK_BUFFER_BACK = 1,
    NK_BUFFER_MAX = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_buffer_marker {
    pub active: ::std::os::raw::c_int,
    pub offset: nk_size,
}
impl ::std::clone::Clone for Struct_nk_buffer_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_buffer_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_memory {
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: nk_size,
}
impl ::std::clone::Clone for Struct_nk_memory {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_memory {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_buffer {
    pub marker: [Struct_nk_buffer_marker; 2usize],
    pub pool: Struct_nk_allocator,
    pub _type: Enum_nk_allocation_type,
    pub memory: Struct_nk_memory,
    pub grow_factor: ::std::os::raw::c_float,
    pub allocated: nk_size,
    pub needed: nk_size,
    pub calls: nk_size,
    pub size: nk_size,
}
impl ::std::clone::Clone for Struct_nk_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_str {
    pub buffer: Struct_nk_buffer,
    pub len: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_nk_str {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_clipboard {
    pub userdata: nk_handle,
    pub paste: nk_paste_f,
    pub copy: nk_copy_f,
}
impl ::std::clone::Clone for Struct_nk_clipboard {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_clipboard {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_text_undo_record {
    pub _where: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_short,
    pub delete_length: ::std::os::raw::c_short,
    pub char_storage: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for Struct_nk_text_undo_record {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_text_undo_record {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_text_undo_state {
    pub undo_rec: [Struct_nk_text_undo_record; 99usize],
    pub undo_char: [nk_rune; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_short,
    pub redo_char_point: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for Struct_nk_text_undo_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_text_undo_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_text_edit_type {
    NK_TEXT_EDIT_SINGLE_LINE = 0,
    NK_TEXT_EDIT_MULTI_LINE = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_text_edit {
    pub clip: Struct_nk_clipboard,
    pub string: Struct_nk_str,
    pub filter: nk_filter,
    pub scrollbar: Struct_nk_vec2,
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub active: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub preferred_x: ::std::os::raw::c_float,
    pub undo: Struct_nk_text_undo_state,
}
impl ::std::clone::Clone for Struct_nk_text_edit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_text_edit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_nk_user_font_glyph { }
pub type nk_text_width_f =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               h: ::std::os::raw::c_float,
                                               arg2:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_float>;
pub type nk_query_font_glyph_f =
    ::std::option::Option<unsafe extern "C" fn(handle: nk_handle,
                                               font_height:
                                                   ::std::os::raw::c_float,
                                               glyph:
                                                   *mut Struct_nk_user_font_glyph,
                                               codepoint: nk_rune,
                                               next_codepoint: nk_rune)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_user_font {
    pub userdata: nk_handle,
    pub height: ::std::os::raw::c_float,
    pub width: nk_text_width_f,
}
impl ::std::clone::Clone for Struct_nk_user_font {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_user_font {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_command_type {
    NK_COMMAND_NOP = 0,
    NK_COMMAND_SCISSOR = 1,
    NK_COMMAND_LINE = 2,
    NK_COMMAND_CURVE = 3,
    NK_COMMAND_RECT = 4,
    NK_COMMAND_RECT_FILLED = 5,
    NK_COMMAND_RECT_MULTI_COLOR = 6,
    NK_COMMAND_CIRCLE = 7,
    NK_COMMAND_CIRCLE_FILLED = 8,
    NK_COMMAND_ARC = 9,
    NK_COMMAND_ARC_FILLED = 10,
    NK_COMMAND_TRIANGLE = 11,
    NK_COMMAND_TRIANGLE_FILLED = 12,
    NK_COMMAND_POLYGON = 13,
    NK_COMMAND_POLYGON_FILLED = 14,
    NK_COMMAND_POLYLINE = 15,
    NK_COMMAND_TEXT = 16,
    NK_COMMAND_IMAGE = 17,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command {
    pub _type: Enum_nk_command_type,
    pub next: nk_size,
}
impl ::std::clone::Clone for Struct_nk_command {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_scissor {
    pub header: Struct_nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_nk_command_scissor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_scissor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_line {
    pub header: Struct_nk_command,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub begin: Struct_nk_vec2i,
    pub end: Struct_nk_vec2i,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_line {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_line {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_curve {
    pub header: Struct_nk_command,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub begin: Struct_nk_vec2i,
    pub end: Struct_nk_vec2i,
    pub ctrl: [Struct_nk_vec2i; 2usize],
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_curve {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_curve {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_rect {
    pub header: Struct_nk_command,
    pub rounding: ::std::os::raw::c_ushort,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_rect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_rect_filled {
    pub header: Struct_nk_command,
    pub rounding: ::std::os::raw::c_ushort,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_rect_filled {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_rect_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_rect_multi_color {
    pub header: Struct_nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub left: Struct_nk_color,
    pub top: Struct_nk_color,
    pub bottom: Struct_nk_color,
    pub right: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_rect_multi_color {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_rect_multi_color {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_triangle {
    pub header: Struct_nk_command,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub a: Struct_nk_vec2i,
    pub b: Struct_nk_vec2i,
    pub c: Struct_nk_vec2i,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_triangle {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_triangle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_triangle_filled {
    pub header: Struct_nk_command,
    pub a: Struct_nk_vec2i,
    pub b: Struct_nk_vec2i,
    pub c: Struct_nk_vec2i,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_triangle_filled {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_triangle_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_circle {
    pub header: Struct_nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_circle {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_circle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_circle_filled {
    pub header: Struct_nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_circle_filled {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_circle_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_arc {
    pub header: Struct_nk_command,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub r: ::std::os::raw::c_ushort,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub a: [::std::os::raw::c_float; 2usize],
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_arc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_arc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_arc_filled {
    pub header: Struct_nk_command,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub r: ::std::os::raw::c_ushort,
    pub a: [::std::os::raw::c_float; 2usize],
    pub color: Struct_nk_color,
}
impl ::std::clone::Clone for Struct_nk_command_arc_filled {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_arc_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_polygon {
    pub header: Struct_nk_command,
    pub color: Struct_nk_color,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub point_count: ::std::os::raw::c_ushort,
    pub points: [Struct_nk_vec2i; 1usize],
}
impl ::std::clone::Clone for Struct_nk_command_polygon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_polygon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_polygon_filled {
    pub header: Struct_nk_command,
    pub color: Struct_nk_color,
    pub point_count: ::std::os::raw::c_ushort,
    pub points: [Struct_nk_vec2i; 1usize],
}
impl ::std::clone::Clone for Struct_nk_command_polygon_filled {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_polygon_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_polyline {
    pub header: Struct_nk_command,
    pub color: Struct_nk_color,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub point_count: ::std::os::raw::c_ushort,
    pub points: [Struct_nk_vec2i; 1usize],
}
impl ::std::clone::Clone for Struct_nk_command_polyline {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_polyline {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_image {
    pub header: Struct_nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub img: Struct_nk_image,
}
impl ::std::clone::Clone for Struct_nk_command_image {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_text {
    pub header: Struct_nk_command,
    pub font: *const Struct_nk_user_font,
    pub background: Struct_nk_color,
    pub foreground: Struct_nk_color,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_float,
    pub length: ::std::os::raw::c_int,
    pub string: [::std::os::raw::c_char; 1usize],
}
impl ::std::clone::Clone for Struct_nk_command_text {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_text {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_command_clipping { NK_CLIPPING_OFF = 0, NK_CLIPPING_ON = 1, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_command_buffer {
    pub base: *mut Struct_nk_buffer,
    pub clip: Struct_nk_rect,
    pub use_clipping: ::std::os::raw::c_int,
    pub userdata: nk_handle,
    pub begin: nk_size,
    pub end: nk_size,
    pub last: nk_size,
}
impl ::std::clone::Clone for Struct_nk_command_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_command_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_mouse_button {
    pub down: ::std::os::raw::c_int,
    pub clicked: ::std::os::raw::c_uint,
    pub clicked_pos: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_mouse_button {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_mouse_button {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_mouse {
    pub buttons: [Struct_nk_mouse_button; 3usize],
    pub pos: Struct_nk_vec2,
    pub prev: Struct_nk_vec2,
    pub delta: Struct_nk_vec2,
    pub scroll_delta: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_nk_mouse {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_mouse {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_key {
    pub down: ::std::os::raw::c_int,
    pub clicked: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_nk_key {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_keyboard {
    pub keys: [Struct_nk_key; 23usize],
    pub text: [::std::os::raw::c_char; 16usize],
    pub text_len: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_nk_keyboard {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_keyboard {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_input {
    pub keyboard: Struct_nk_keyboard,
    pub mouse: Struct_nk_mouse,
}
impl ::std::clone::Clone for Struct_nk_input {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_input {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_style_item_type {
    NK_STYLE_ITEM_COLOR = 0,
    NK_STYLE_ITEM_IMAGE = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_nk_style_item_data {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_nk_style_item_data {
    pub unsafe fn image(&mut self) -> *mut Struct_nk_image {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn color(&mut self) -> *mut Struct_nk_color {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_nk_style_item_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_nk_style_item_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_item {
    pub _type: Enum_nk_style_item_type,
    pub data: Union_nk_style_item_data,
}
impl ::std::clone::Clone for Struct_nk_style_item {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_text {
    pub color: Struct_nk_color,
    pub padding: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_style_text {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_text {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_custom_button_drawing {
    pub button_text: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut Struct_nk_command_buffer,
                                                                background:
                                                                    *const Struct_nk_rect,
                                                                arg2:
                                                                    *const Struct_nk_rect,
                                                                state:
                                                                    nk_flags,
                                                                arg3:
                                                                    *const Struct_nk_style_button,
                                                                arg4:
                                                                    *const ::std::os::raw::c_char,
                                                                len:
                                                                    ::std::os::raw::c_int,
                                                                text_alignment:
                                                                    nk_flags,
                                                                arg5:
                                                                    *const Struct_nk_user_font)>,
    pub button_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut Struct_nk_command_buffer,
                                                                  background:
                                                                      *const Struct_nk_rect,
                                                                  arg2:
                                                                      *const Struct_nk_rect,
                                                                  state:
                                                                      nk_flags,
                                                                  arg3:
                                                                      *const Struct_nk_style_button,
                                                                  arg4:
                                                                      Enum_nk_symbol_type,
                                                                  arg5:
                                                                      *const Struct_nk_user_font)>,
    pub button_image: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut Struct_nk_command_buffer,
                                                                 background:
                                                                     *const Struct_nk_rect,
                                                                 arg2:
                                                                     *const Struct_nk_rect,
                                                                 state:
                                                                     nk_flags,
                                                                 arg3:
                                                                     *const Struct_nk_style_button,
                                                                 img:
                                                                     *const Struct_nk_image)>,
    pub button_text_symbol: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut Struct_nk_command_buffer,
                                                                       background:
                                                                           *const Struct_nk_rect,
                                                                       arg2:
                                                                           *const Struct_nk_rect,
                                                                       symbol:
                                                                           *const Struct_nk_rect,
                                                                       state:
                                                                           nk_flags,
                                                                       arg3:
                                                                           *const Struct_nk_style_button,
                                                                       text:
                                                                           *const ::std::os::raw::c_char,
                                                                       len:
                                                                           ::std::os::raw::c_int,
                                                                       arg4:
                                                                           Enum_nk_symbol_type,
                                                                       arg5:
                                                                           *const Struct_nk_user_font)>,
    pub button_text_image: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                          *mut Struct_nk_command_buffer,
                                                                      background:
                                                                          *const Struct_nk_rect,
                                                                      arg2:
                                                                          *const Struct_nk_rect,
                                                                      image:
                                                                          *const Struct_nk_rect,
                                                                      state:
                                                                          nk_flags,
                                                                      arg3:
                                                                          *const Struct_nk_style_button,
                                                                      text:
                                                                          *const ::std::os::raw::c_char,
                                                                      len:
                                                                          ::std::os::raw::c_int,
                                                                      arg4:
                                                                          *const Struct_nk_user_font,
                                                                      img:
                                                                          *const Struct_nk_image)>,
}
impl ::std::clone::Clone for Struct_nk_style_custom_button_drawing {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_custom_button_drawing {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_button {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub text_background: Struct_nk_color,
    pub text_normal: Struct_nk_color,
    pub text_hover: Struct_nk_color,
    pub text_active: Struct_nk_color,
    pub text_alignment: nk_flags,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub image_padding: Struct_nk_vec2,
    pub touch_padding: Struct_nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               userdata:
                                                                   nk_handle)>,
    pub draw: Struct_nk_style_custom_button_drawing,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             userdata:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_button {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_button {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_nk_style_custom_toggle_drawing {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_nk_style_custom_toggle_drawing {
    pub unsafe fn radio(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         state: nk_flags,
                                                         toggle:
                                                             *const Struct_nk_style_toggle,
                                                         active:
                                                             ::std::os::raw::c_int,
                                                         label:
                                                             *const Struct_nk_rect,
                                                         selector:
                                                             *const Struct_nk_rect,
                                                         cursor:
                                                             *const Struct_nk_rect,
                                                         string:
                                                             *const ::std::os::raw::c_char,
                                                         len:
                                                             ::std::os::raw::c_int,
                                                         font:
                                                             *const Struct_nk_user_font)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn checkbox(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         state: nk_flags,
                                                         toggle:
                                                             *const Struct_nk_style_toggle,
                                                         active:
                                                             ::std::os::raw::c_int,
                                                         label:
                                                             *const Struct_nk_rect,
                                                         selector:
                                                             *const Struct_nk_rect,
                                                         cursor:
                                                             *const Struct_nk_rect,
                                                         string:
                                                             *const ::std::os::raw::c_char,
                                                         len:
                                                             ::std::os::raw::c_int,
                                                         font:
                                                             *const Struct_nk_user_font)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_nk_style_custom_toggle_drawing {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_nk_style_custom_toggle_drawing {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_toggle {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub cursor_normal: Struct_nk_style_item,
    pub cursor_hover: Struct_nk_style_item,
    pub text_normal: Struct_nk_color,
    pub text_hover: Struct_nk_color,
    pub text_active: Struct_nk_color,
    pub text_background: Struct_nk_color,
    pub text_alignment: nk_flags,
    pub padding: Struct_nk_vec2,
    pub touch_padding: Struct_nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw: Union_nk_style_custom_toggle_drawing,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_toggle {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_toggle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_selectable {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub pressed: Struct_nk_style_item,
    pub normal_active: Struct_nk_style_item,
    pub hover_active: Struct_nk_style_item,
    pub pressed_active: Struct_nk_style_item,
    pub text_normal: Struct_nk_color,
    pub text_hover: Struct_nk_color,
    pub text_pressed: Struct_nk_color,
    pub text_normal_active: Struct_nk_color,
    pub text_hover_active: Struct_nk_color,
    pub text_pressed_active: Struct_nk_color,
    pub text_background: Struct_nk_color,
    pub text_alignment: nk_flags,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub touch_padding: Struct_nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         state: nk_flags,
                                                         arg2:
                                                             *const Struct_nk_style_selectable,
                                                         active:
                                                             ::std::os::raw::c_int,
                                                         arg3:
                                                             *const Struct_nk_rect,
                                                         string:
                                                             *const ::std::os::raw::c_char,
                                                         len:
                                                             ::std::os::raw::c_int,
                                                         align: nk_flags,
                                                         arg4:
                                                             *const Struct_nk_user_font)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_selectable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_selectable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_slider {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub bar_normal: Struct_nk_color,
    pub bar_hover: Struct_nk_color,
    pub bar_active: Struct_nk_color,
    pub bar_filled: Struct_nk_color,
    pub cursor_normal: Struct_nk_style_item,
    pub cursor_hover: Struct_nk_style_item,
    pub cursor_active: Struct_nk_style_item,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub bar_height: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub spacing: Struct_nk_vec2,
    pub cursor_size: Struct_nk_vec2,
    pub show_buttons: ::std::os::raw::c_int,
    pub inc_button: Struct_nk_style_button,
    pub dec_button: Struct_nk_style_button,
    pub inc_symbol: Enum_nk_symbol_type,
    pub dec_symbol: Enum_nk_symbol_type,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         state: nk_flags,
                                                         arg2:
                                                             *const Struct_nk_style_slider,
                                                         bar:
                                                             *const Struct_nk_rect,
                                                         cursor:
                                                             *const Struct_nk_rect,
                                                         min:
                                                             ::std::os::raw::c_float,
                                                         value:
                                                             ::std::os::raw::c_float,
                                                         max:
                                                             ::std::os::raw::c_float)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_slider {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_slider {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_progress {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub cursor_normal: Struct_nk_style_item,
    pub cursor_hover: Struct_nk_style_item,
    pub cursor_active: Struct_nk_style_item,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         state: nk_flags,
                                                         arg2:
                                                             *const Struct_nk_style_progress,
                                                         bounds:
                                                             *const Struct_nk_rect,
                                                         cursor:
                                                             *const Struct_nk_rect,
                                                         value: nk_size,
                                                         max: nk_size)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_progress {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_progress {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_scrollbar {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub cursor_normal: Struct_nk_style_item,
    pub cursor_hover: Struct_nk_style_item,
    pub cursor_active: Struct_nk_style_item,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub show_buttons: ::std::os::raw::c_int,
    pub inc_button: Struct_nk_style_button,
    pub dec_button: Struct_nk_style_button,
    pub inc_symbol: Enum_nk_symbol_type,
    pub dec_symbol: Enum_nk_symbol_type,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         state: nk_flags,
                                                         arg2:
                                                             *const Struct_nk_style_scrollbar,
                                                         scroll:
                                                             *const Struct_nk_rect,
                                                         cursor:
                                                             *const Struct_nk_rect)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_scrollbar {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_scrollbar {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_edit {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub scrollbar: Struct_nk_style_scrollbar,
    pub cursor_normal: Struct_nk_color,
    pub cursor_hover: Struct_nk_color,
    pub cursor_text_normal: Struct_nk_color,
    pub cursor_text_hover: Struct_nk_color,
    pub text_normal: Struct_nk_color,
    pub text_hover: Struct_nk_color,
    pub text_active: Struct_nk_color,
    pub selected_normal: Struct_nk_color,
    pub selected_hover: Struct_nk_color,
    pub selected_text_normal: Struct_nk_color,
    pub selected_text_hover: Struct_nk_color,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub cursor_size: ::std::os::raw::c_float,
    pub scrollbar_size: Struct_nk_vec2,
    pub padding: Struct_nk_vec2,
    pub row_padding: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_nk_style_edit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_edit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_property {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub label_normal: Struct_nk_color,
    pub label_hover: Struct_nk_color,
    pub label_active: Struct_nk_color,
    pub sym_left: Enum_nk_symbol_type,
    pub sym_right: Enum_nk_symbol_type,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub edit: Struct_nk_style_edit,
    pub inc_button: Struct_nk_style_button,
    pub dec_button: Struct_nk_style_button,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut Struct_nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut Struct_nk_command_buffer,
                                                         arg2:
                                                             *const Struct_nk_style_property,
                                                         arg3:
                                                             *const Struct_nk_rect,
                                                         label:
                                                             *const Struct_nk_rect,
                                                         state: nk_flags,
                                                         name:
                                                             *const ::std::os::raw::c_char,
                                                         len:
                                                             ::std::os::raw::c_int,
                                                         arg4:
                                                             *const Struct_nk_user_font)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut Struct_nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::clone::Clone for Struct_nk_style_property {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_property {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_chart {
    pub background: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub selected_color: Struct_nk_color,
    pub color: Struct_nk_color,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_style_chart {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_chart {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_combo {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub label_normal: Struct_nk_color,
    pub label_hover: Struct_nk_color,
    pub label_active: Struct_nk_color,
    pub symbol_normal: Struct_nk_color,
    pub symbol_hover: Struct_nk_color,
    pub symbol_active: Struct_nk_color,
    pub button: Struct_nk_style_button,
    pub sym_normal: Enum_nk_symbol_type,
    pub sym_hover: Enum_nk_symbol_type,
    pub sym_active: Enum_nk_symbol_type,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub content_padding: Struct_nk_vec2,
    pub button_padding: Struct_nk_vec2,
    pub spacing: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_style_combo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_combo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_tab {
    pub background: Struct_nk_style_item,
    pub border_color: Struct_nk_color,
    pub text: Struct_nk_color,
    pub tab_button: Struct_nk_style_button,
    pub node_button: Struct_nk_style_button,
    pub sym_minimize: Enum_nk_symbol_type,
    pub sym_maximize: Enum_nk_symbol_type,
    pub border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub padding: Struct_nk_vec2,
    pub spacing: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_style_tab {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_tab {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_style_header_align {
    NK_HEADER_LEFT = 0,
    NK_HEADER_RIGHT = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_window_header {
    pub normal: Struct_nk_style_item,
    pub hover: Struct_nk_style_item,
    pub active: Struct_nk_style_item,
    pub close_button: Struct_nk_style_button,
    pub minimize_button: Struct_nk_style_button,
    pub close_symbol: Enum_nk_symbol_type,
    pub minimize_symbol: Enum_nk_symbol_type,
    pub maximize_symbol: Enum_nk_symbol_type,
    pub label_normal: Struct_nk_color,
    pub label_hover: Struct_nk_color,
    pub label_active: Struct_nk_color,
    pub align: Enum_nk_style_header_align,
    pub padding: Struct_nk_vec2,
    pub label_padding: Struct_nk_vec2,
    pub spacing: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_style_window_header {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_window_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style_window {
    pub header: Struct_nk_style_window_header,
    pub fixed_background: Struct_nk_style_item,
    pub background: Struct_nk_color,
    pub border_color: Struct_nk_color,
    pub combo_border_color: Struct_nk_color,
    pub contextual_border_color: Struct_nk_color,
    pub menu_border_color: Struct_nk_color,
    pub group_border_color: Struct_nk_color,
    pub tooltip_border_color: Struct_nk_color,
    pub scaler: Struct_nk_style_item,
    pub footer_padding: Struct_nk_vec2,
    pub border: ::std::os::raw::c_float,
    pub combo_border: ::std::os::raw::c_float,
    pub contextual_border: ::std::os::raw::c_float,
    pub menu_border: ::std::os::raw::c_float,
    pub group_border: ::std::os::raw::c_float,
    pub tooltip_border: ::std::os::raw::c_float,
    pub rounding: ::std::os::raw::c_float,
    pub scaler_size: Struct_nk_vec2,
    pub padding: Struct_nk_vec2,
    pub spacing: Struct_nk_vec2,
    pub scrollbar_size: Struct_nk_vec2,
    pub min_size: Struct_nk_vec2,
}
impl ::std::clone::Clone for Struct_nk_style_window {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style_window {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_style {
    pub font: Struct_nk_user_font,
    pub text: Struct_nk_style_text,
    pub button: Struct_nk_style_button,
    pub contextual_button: Struct_nk_style_button,
    pub menu_button: Struct_nk_style_button,
    pub option: Struct_nk_style_toggle,
    pub checkbox: Struct_nk_style_toggle,
    pub selectable: Struct_nk_style_selectable,
    pub slider: Struct_nk_style_slider,
    pub progress: Struct_nk_style_progress,
    pub property: Struct_nk_style_property,
    pub edit: Struct_nk_style_edit,
    pub line_chart: Struct_nk_style_chart,
    pub column_chart: Struct_nk_style_chart,
    pub scrollh: Struct_nk_style_scrollbar,
    pub scrollv: Struct_nk_style_scrollbar,
    pub tab: Struct_nk_style_tab,
    pub combo: Struct_nk_style_combo,
    pub window: Struct_nk_style_window,
}
impl ::std::clone::Clone for Struct_nk_style {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_style {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_chart {
    pub style: *const Struct_nk_style_chart,
    pub _type: Enum_nk_chart_type,
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
    pub w: ::std::os::raw::c_float,
    pub h: ::std::os::raw::c_float,
    pub min: ::std::os::raw::c_float,
    pub max: ::std::os::raw::c_float,
    pub range: ::std::os::raw::c_float,
    pub last: Struct_nk_vec2,
    pub index: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_nk_chart {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_chart {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_row_layout {
    pub _type: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_float,
    pub columns: ::std::os::raw::c_int,
    pub ratio: *const ::std::os::raw::c_float,
    pub item_width: ::std::os::raw::c_float,
    pub item_height: ::std::os::raw::c_float,
    pub item_offset: ::std::os::raw::c_float,
    pub filled: ::std::os::raw::c_float,
    pub item: Struct_nk_rect,
    pub tree_depth: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_nk_row_layout {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_row_layout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_popup_buffer {
    pub begin: nk_size,
    pub parent: nk_size,
    pub last: nk_size,
    pub end: nk_size,
    pub active: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_nk_popup_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_popup_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_menu_state {
    pub x: ::std::os::raw::c_float,
    pub y: ::std::os::raw::c_float,
    pub w: ::std::os::raw::c_float,
    pub h: ::std::os::raw::c_float,
    pub offset: Struct_nk_scroll,
}
impl ::std::clone::Clone for Struct_nk_menu_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_menu_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_panel {
    pub flags: nk_flags,
    pub bounds: Struct_nk_rect,
    pub offset: *mut Struct_nk_scroll,
    pub at_x: ::std::os::raw::c_float,
    pub at_y: ::std::os::raw::c_float,
    pub max_x: ::std::os::raw::c_float,
    pub width: ::std::os::raw::c_float,
    pub height: ::std::os::raw::c_float,
    pub footer_h: ::std::os::raw::c_float,
    pub header_h: ::std::os::raw::c_float,
    pub border: ::std::os::raw::c_float,
    pub clip: Struct_nk_rect,
    pub menu: Struct_nk_menu_state,
    pub row: Struct_nk_row_layout,
    pub chart: Struct_nk_chart,
    pub popup_buffer: Struct_nk_popup_buffer,
    pub buffer: *mut Struct_nk_command_buffer,
    pub parent: *mut Struct_nk_panel,
}
impl ::std::clone::Clone for Struct_nk_panel {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_panel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_nk_table { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_nk_window_flags {
    NK_WINDOW_PRIVATE = 512,
    NK_WINDOW_ROM = 1024,
    NK_WINDOW_HIDDEN = 2048,
    NK_WINDOW_MINIMIZED = 4096,
    NK_WINDOW_SUB = 8192,
    NK_WINDOW_GROUP = 16384,
    NK_WINDOW_POPUP = 32768,
    NK_WINDOW_NONBLOCK = 65536,
    NK_WINDOW_CONTEXTUAL = 131072,
    NK_WINDOW_COMBO = 262144,
    NK_WINDOW_MENU = 524288,
    NK_WINDOW_TOOLTIP = 1048576,
    NK_WINDOW_REMOVE_ROM = 2097152,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_popup_state {
    pub win: *mut Struct_nk_window,
    pub _type: Enum_nk_window_flags,
    pub name: nk_hash,
    pub active: ::std::os::raw::c_int,
    pub combo_count: ::std::os::raw::c_uint,
    pub con_count: ::std::os::raw::c_uint,
    pub con_old: ::std::os::raw::c_uint,
    pub active_con: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_nk_popup_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_popup_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_edit_state {
    pub name: nk_hash,
    pub seq: ::std::os::raw::c_uint,
    pub old: ::std::os::raw::c_uint,
    pub active: ::std::os::raw::c_int,
    pub prev: ::std::os::raw::c_int,
    pub cursor: ::std::os::raw::c_int,
    pub sel_start: ::std::os::raw::c_int,
    pub sel_end: ::std::os::raw::c_int,
    pub scrollbar: Struct_nk_scroll,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct_nk_edit_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_edit_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_property_state {
    pub active: ::std::os::raw::c_int,
    pub prev: ::std::os::raw::c_int,
    pub buffer: [::std::os::raw::c_char; 64usize],
    pub length: ::std::os::raw::c_int,
    pub cursor: ::std::os::raw::c_int,
    pub name: nk_hash,
    pub seq: ::std::os::raw::c_uint,
    pub old: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_nk_property_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_property_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_window {
    pub name: nk_hash,
    pub flags: nk_flags,
    pub seq: ::std::os::raw::c_uint,
    pub bounds: Struct_nk_rect,
    pub scrollbar: Struct_nk_scroll,
    pub buffer: Struct_nk_command_buffer,
    pub layout: *mut Struct_nk_panel,
    pub property: Struct_nk_property_state,
    pub popup: Struct_nk_popup_state,
    pub edit: Struct_nk_edit_state,
    pub tables: *mut Struct_nk_table,
    pub table_count: ::std::os::raw::c_ushort,
    pub table_size: ::std::os::raw::c_ushort,
    pub next: *mut Struct_nk_window,
    pub prev: *mut Struct_nk_window,
    pub parent: *mut Struct_nk_window,
}
impl ::std::clone::Clone for Struct_nk_window {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_window {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nk_context {
    pub input: Struct_nk_input,
    pub style: Struct_nk_style,
    pub memory: Struct_nk_buffer,
    pub clip: Struct_nk_clipboard,
    pub last_widget_state: nk_flags,
    pub text_edit: Struct_nk_text_edit,
    pub build: ::std::os::raw::c_int,
    pub pool: *mut ::std::os::raw::c_void,
    pub begin: *mut Struct_nk_window,
    pub end: *mut Struct_nk_window,
    pub active: *mut Struct_nk_window,
    pub current: *mut Struct_nk_window,
    pub freelist: *mut Struct_nk_window,
    pub count: ::std::os::raw::c_uint,
    pub seq: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_nk_context {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nk_context {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn nk_init_fixed(arg1: *mut Struct_nk_context,
                         memory: *mut ::std::os::raw::c_void, size: nk_size,
                         arg2: *const Struct_nk_user_font)
     -> ::std::os::raw::c_int;
    pub fn nk_init_custom(arg1: *mut Struct_nk_context,
                          cmds: *mut Struct_nk_buffer,
                          pool: *mut Struct_nk_buffer,
                          arg2: *const Struct_nk_user_font)
     -> ::std::os::raw::c_int;
    pub fn nk_init(arg1: *mut Struct_nk_context,
                   arg2: *mut Struct_nk_allocator,
                   arg3: *const Struct_nk_user_font) -> ::std::os::raw::c_int;
    pub fn nk_clear(arg1: *mut Struct_nk_context);
    pub fn nk_free(arg1: *mut Struct_nk_context);
    pub fn nk_begin(arg1: *mut Struct_nk_context, arg2: *mut Struct_nk_panel,
                    title: *const ::std::os::raw::c_char,
                    bounds: Struct_nk_rect, flags: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_end(arg1: *mut Struct_nk_context);
    pub fn nk_window_find(ctx: *mut Struct_nk_context,
                          name: *const ::std::os::raw::c_char)
     -> *mut Struct_nk_window;
    pub fn nk_window_get_bounds(arg1: *const Struct_nk_context)
     -> Struct_nk_rect;
    pub fn nk_window_get_position(arg1: *const Struct_nk_context)
     -> Struct_nk_vec2;
    pub fn nk_window_get_size(arg1: *const Struct_nk_context)
     -> Struct_nk_vec2;
    pub fn nk_window_get_width(arg1: *const Struct_nk_context)
     -> ::std::os::raw::c_float;
    pub fn nk_window_get_height(arg1: *const Struct_nk_context)
     -> ::std::os::raw::c_float;
    pub fn nk_window_get_panel(arg1: *mut Struct_nk_context)
     -> *mut Struct_nk_panel;
    pub fn nk_window_get_content_region(arg1: *mut Struct_nk_context)
     -> Struct_nk_rect;
    pub fn nk_window_get_content_region_min(arg1: *mut Struct_nk_context)
     -> Struct_nk_vec2;
    pub fn nk_window_get_content_region_max(arg1: *mut Struct_nk_context)
     -> Struct_nk_vec2;
    pub fn nk_window_get_content_region_size(arg1: *mut Struct_nk_context)
     -> Struct_nk_vec2;
    pub fn nk_window_get_canvas(arg1: *mut Struct_nk_context)
     -> *mut Struct_nk_command_buffer;
    pub fn nk_window_has_focus(arg1: *const Struct_nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_collapsed(arg1: *mut Struct_nk_context,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_closed(arg1: *mut Struct_nk_context,
                               arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_active(arg1: *mut Struct_nk_context,
                               arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_hovered(arg1: *mut Struct_nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_any_hovered(arg1: *mut Struct_nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_window_set_bounds(arg1: *mut Struct_nk_context,
                                arg2: Struct_nk_rect);
    pub fn nk_window_set_position(arg1: *mut Struct_nk_context,
                                  arg2: Struct_nk_vec2);
    pub fn nk_window_set_size(arg1: *mut Struct_nk_context,
                              arg2: Struct_nk_vec2);
    pub fn nk_window_set_focus(arg1: *mut Struct_nk_context,
                               name: *const ::std::os::raw::c_char);
    pub fn nk_window_close(ctx: *mut Struct_nk_context,
                           name: *const ::std::os::raw::c_char);
    pub fn nk_window_collapse(arg1: *mut Struct_nk_context,
                              name: *const ::std::os::raw::c_char,
                              arg2: Enum_nk_collapse_states);
    pub fn nk_window_collapse_if(arg1: *mut Struct_nk_context,
                                 name: *const ::std::os::raw::c_char,
                                 arg2: Enum_nk_collapse_states,
                                 cond: ::std::os::raw::c_int);
    pub fn nk_window_show(arg1: *mut Struct_nk_context,
                          name: *const ::std::os::raw::c_char,
                          arg2: Enum_nk_show_states);
    pub fn nk_window_show_if(arg1: *mut Struct_nk_context,
                             name: *const ::std::os::raw::c_char,
                             arg2: Enum_nk_show_states,
                             cond: ::std::os::raw::c_int);
    pub fn nk_layout_row_dynamic(arg1: *mut Struct_nk_context,
                                 height: ::std::os::raw::c_float,
                                 cols: ::std::os::raw::c_int);
    pub fn nk_layout_row_static(arg1: *mut Struct_nk_context,
                                height: ::std::os::raw::c_float,
                                item_width: ::std::os::raw::c_int,
                                cols: ::std::os::raw::c_int);
    pub fn nk_layout_row_begin(arg1: *mut Struct_nk_context,
                               arg2: Enum_nk_layout_format,
                               row_height: ::std::os::raw::c_float,
                               cols: ::std::os::raw::c_int);
    pub fn nk_layout_row_push(arg1: *mut Struct_nk_context,
                              value: ::std::os::raw::c_float);
    pub fn nk_layout_row_end(arg1: *mut Struct_nk_context);
    pub fn nk_layout_row(arg1: *mut Struct_nk_context,
                         arg2: Enum_nk_layout_format,
                         height: ::std::os::raw::c_float,
                         cols: ::std::os::raw::c_int,
                         ratio: *const ::std::os::raw::c_float);
    pub fn nk_layout_space_begin(arg1: *mut Struct_nk_context,
                                 arg2: Enum_nk_layout_format,
                                 height: ::std::os::raw::c_float,
                                 widget_count: ::std::os::raw::c_int);
    pub fn nk_layout_space_push(arg1: *mut Struct_nk_context,
                                arg2: Struct_nk_rect);
    pub fn nk_layout_space_end(arg1: *mut Struct_nk_context);
    pub fn nk_layout_space_bounds(arg1: *mut Struct_nk_context)
     -> Struct_nk_rect;
    pub fn nk_layout_space_to_screen(arg1: *mut Struct_nk_context,
                                     arg2: Struct_nk_vec2) -> Struct_nk_vec2;
    pub fn nk_layout_space_to_local(arg1: *mut Struct_nk_context,
                                    arg2: Struct_nk_vec2) -> Struct_nk_vec2;
    pub fn nk_layout_space_rect_to_screen(arg1: *mut Struct_nk_context,
                                          arg2: Struct_nk_rect)
     -> Struct_nk_rect;
    pub fn nk_layout_space_rect_to_local(arg1: *mut Struct_nk_context,
                                         arg2: Struct_nk_rect)
     -> Struct_nk_rect;
    pub fn nk_group_begin(arg1: *mut Struct_nk_context,
                          arg2: *mut Struct_nk_panel,
                          title: *const ::std::os::raw::c_char,
                          arg3: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_group_end(arg1: *mut Struct_nk_context);
    pub fn nk_tree_push_hashed(arg1: *mut Struct_nk_context,
                               arg2: Enum_nk_tree_type,
                               title: *const ::std::os::raw::c_char,
                               initial_state: Enum_nk_collapse_states,
                               hash: *const ::std::os::raw::c_char,
                               len: ::std::os::raw::c_int,
                               seed: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_tree_pop(arg1: *mut Struct_nk_context);
    pub fn nk_text(arg1: *mut Struct_nk_context,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: nk_flags);
    pub fn nk_text_colored(arg1: *mut Struct_nk_context,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: ::std::os::raw::c_int, arg4: nk_flags,
                           arg5: Struct_nk_color);
    pub fn nk_text_wrap(arg1: *mut Struct_nk_context,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int);
    pub fn nk_text_wrap_colored(arg1: *mut Struct_nk_context,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: ::std::os::raw::c_int,
                                arg4: Struct_nk_color);
    pub fn nk_label(arg1: *mut Struct_nk_context,
                    arg2: *const ::std::os::raw::c_char, arg3: nk_flags);
    pub fn nk_label_colored(arg1: *mut Struct_nk_context,
                            arg2: *const ::std::os::raw::c_char,
                            align: nk_flags, arg3: Struct_nk_color);
    pub fn nk_label_wrap(arg1: *mut Struct_nk_context,
                         arg2: *const ::std::os::raw::c_char);
    pub fn nk_label_colored_wrap(arg1: *mut Struct_nk_context,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: Struct_nk_color);
    pub fn nk_image(arg1: *mut Struct_nk_context, arg2: Struct_nk_image);
    pub fn nk_button_text(ctx: *mut Struct_nk_context,
                          title: *const ::std::os::raw::c_char,
                          len: ::std::os::raw::c_int,
                          arg1: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_label(ctx: *mut Struct_nk_context,
                           title: *const ::std::os::raw::c_char,
                           arg1: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_color(arg1: *mut Struct_nk_context,
                           arg2: Struct_nk_color,
                           arg3: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_symbol(arg1: *mut Struct_nk_context,
                            arg2: Enum_nk_symbol_type,
                            arg3: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_image(arg1: *mut Struct_nk_context, img: Struct_nk_image,
                           arg2: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_symbol_label(arg1: *mut Struct_nk_context,
                                  arg2: Enum_nk_symbol_type,
                                  arg3: *const ::std::os::raw::c_char,
                                  text_alignment: nk_flags,
                                  arg4: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_symbol_text(arg1: *mut Struct_nk_context,
                                 arg2: Enum_nk_symbol_type,
                                 arg3: *const ::std::os::raw::c_char,
                                 arg4: ::std::os::raw::c_int,
                                 alignment: nk_flags,
                                 arg5: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_image_label(arg1: *mut Struct_nk_context,
                                 img: Struct_nk_image,
                                 arg2: *const ::std::os::raw::c_char,
                                 text_alignment: nk_flags,
                                 arg3: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_image_text(arg1: *mut Struct_nk_context,
                                img: Struct_nk_image,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: ::std::os::raw::c_int,
                                alignment: nk_flags,
                                arg4: Enum_nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_check_label(arg1: *mut Struct_nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_check_text(arg1: *mut Struct_nk_context,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_check_flags_label(arg1: *mut Struct_nk_context,
                                arg2: *const ::std::os::raw::c_char,
                                flags: ::std::os::raw::c_uint,
                                value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn nk_check_flags_text(arg1: *mut Struct_nk_context,
                               arg2: *const ::std::os::raw::c_char,
                               arg3: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint,
                               value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn nk_checkbox_label(arg1: *mut Struct_nk_context,
                             arg2: *const ::std::os::raw::c_char,
                             active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_checkbox_text(arg1: *mut Struct_nk_context,
                            arg2: *const ::std::os::raw::c_char,
                            arg3: ::std::os::raw::c_int,
                            active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_checkbox_flags_label(arg1: *mut Struct_nk_context,
                                   arg2: *const ::std::os::raw::c_char,
                                   flags: *mut ::std::os::raw::c_uint,
                                   value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn nk_checkbox_flags_text(arg1: *mut Struct_nk_context,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: ::std::os::raw::c_int,
                                  flags: *mut ::std::os::raw::c_uint,
                                  value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn nk_radio_label(arg1: *mut Struct_nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_radio_text(arg1: *mut Struct_nk_context,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_option_label(arg1: *mut Struct_nk_context,
                           arg2: *const ::std::os::raw::c_char,
                           active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_option_text(arg1: *mut Struct_nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: ::std::os::raw::c_int,
                          active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_selectable_label(arg1: *mut Struct_nk_context,
                               arg2: *const ::std::os::raw::c_char,
                               align: nk_flags,
                               value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_selectable_text(arg1: *mut Struct_nk_context,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: ::std::os::raw::c_int, align: nk_flags,
                              value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_select_label(arg1: *mut Struct_nk_context,
                           arg2: *const ::std::os::raw::c_char,
                           align: nk_flags, value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_select_text(arg1: *mut Struct_nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: ::std::os::raw::c_int, align: nk_flags,
                          value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_slide_float(arg1: *mut Struct_nk_context,
                          min: ::std::os::raw::c_float,
                          val: ::std::os::raw::c_float,
                          max: ::std::os::raw::c_float,
                          step: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn nk_slide_int(arg1: *mut Struct_nk_context,
                        min: ::std::os::raw::c_int,
                        val: ::std::os::raw::c_int,
                        max: ::std::os::raw::c_int,
                        step: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nk_slider_float(arg1: *mut Struct_nk_context,
                           min: ::std::os::raw::c_float,
                           val: *mut ::std::os::raw::c_float,
                           max: ::std::os::raw::c_float,
                           step: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_slider_int(arg1: *mut Struct_nk_context,
                         min: ::std::os::raw::c_int,
                         val: *mut ::std::os::raw::c_int,
                         max: ::std::os::raw::c_int,
                         step: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_progress(arg1: *mut Struct_nk_context, cur: *mut nk_size,
                       max: nk_size, modifyable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_prog(arg1: *mut Struct_nk_context, cur: nk_size, max: nk_size,
                   modifyable: ::std::os::raw::c_int) -> nk_size;
    pub fn nk_color_picker(arg1: *mut Struct_nk_context,
                           arg2: Struct_nk_color, arg3: Enum_nk_color_format)
     -> Struct_nk_color;
    pub fn nk_color_pick(arg1: *mut Struct_nk_context,
                         arg2: *mut Struct_nk_color,
                         arg3: Enum_nk_color_format) -> ::std::os::raw::c_int;
    pub fn nk_property_float(layout: *mut Struct_nk_context,
                             name: *const ::std::os::raw::c_char,
                             min: ::std::os::raw::c_float,
                             val: *mut ::std::os::raw::c_float,
                             max: ::std::os::raw::c_float,
                             step: ::std::os::raw::c_float,
                             inc_per_pixel: ::std::os::raw::c_float);
    pub fn nk_property_int(layout: *mut Struct_nk_context,
                           name: *const ::std::os::raw::c_char,
                           min: ::std::os::raw::c_int,
                           val: *mut ::std::os::raw::c_int,
                           max: ::std::os::raw::c_int,
                           step: ::std::os::raw::c_int,
                           inc_per_pixel: ::std::os::raw::c_int);
    pub fn nk_propertyf(layout: *mut Struct_nk_context,
                        name: *const ::std::os::raw::c_char,
                        min: ::std::os::raw::c_float,
                        val: ::std::os::raw::c_float,
                        max: ::std::os::raw::c_float,
                        step: ::std::os::raw::c_float,
                        inc_per_pixel: ::std::os::raw::c_float)
     -> ::std::os::raw::c_float;
    pub fn nk_propertyi(layout: *mut Struct_nk_context,
                        name: *const ::std::os::raw::c_char,
                        min: ::std::os::raw::c_int,
                        val: ::std::os::raw::c_int,
                        max: ::std::os::raw::c_int,
                        step: ::std::os::raw::c_int,
                        inc_per_pixel: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_edit_string(arg1: *mut Struct_nk_context, arg2: nk_flags,
                          buffer: *mut ::std::os::raw::c_char,
                          len: *mut ::std::os::raw::c_int,
                          max: ::std::os::raw::c_int, arg3: nk_filter)
     -> nk_flags;
    pub fn nk_edit_buffer(arg1: *mut Struct_nk_context, arg2: nk_flags,
                          arg3: *mut Struct_nk_text_edit, arg4: nk_filter)
     -> nk_flags;
    pub fn nk_chart_begin(arg1: *mut Struct_nk_context,
                          arg2: Enum_nk_chart_type,
                          num: ::std::os::raw::c_int,
                          min: ::std::os::raw::c_float,
                          max: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_chart_push(arg1: *mut Struct_nk_context,
                         arg2: ::std::os::raw::c_float) -> nk_flags;
    pub fn nk_chart_end(arg1: *mut Struct_nk_context);
    pub fn nk_plot(arg1: *mut Struct_nk_context, arg2: Enum_nk_chart_type,
                   values: *const ::std::os::raw::c_float,
                   count: ::std::os::raw::c_int,
                   offset: ::std::os::raw::c_int);
    pub fn nk_plot_function(arg1: *mut Struct_nk_context,
                            arg2: Enum_nk_chart_type,
                            userdata: *mut ::std::os::raw::c_void,
                            value_getter:
                                ::std::option::Option<unsafe extern "C" fn(user:
                                                                               *mut ::std::os::raw::c_void,
                                                                           index:
                                                                               ::std::os::raw::c_int)
                                                          ->
                                                              ::std::os::raw::c_float>,
                            count: ::std::os::raw::c_int,
                            offset: ::std::os::raw::c_int);
    pub fn nk_popup_begin(arg1: *mut Struct_nk_context,
                          arg2: *mut Struct_nk_panel,
                          arg3: Enum_nk_popup_type,
                          arg4: *const ::std::os::raw::c_char, arg5: nk_flags,
                          bounds: Struct_nk_rect) -> ::std::os::raw::c_int;
    pub fn nk_popup_close(arg1: *mut Struct_nk_context);
    pub fn nk_popup_end(arg1: *mut Struct_nk_context);
    pub fn nk_combo(arg1: *mut Struct_nk_context,
                    items: *mut *const ::std::os::raw::c_char,
                    count: ::std::os::raw::c_int,
                    selected: ::std::os::raw::c_int,
                    item_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_seperator(arg1: *mut Struct_nk_context,
                              items_seperated_by_seperator:
                                  *const ::std::os::raw::c_char,
                              seperator: ::std::os::raw::c_int,
                              selected: ::std::os::raw::c_int,
                              count: ::std::os::raw::c_int,
                              item_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_string(arg1: *mut Struct_nk_context,
                           items_seperated_by_zeros:
                               *const ::std::os::raw::c_char,
                           selected: ::std::os::raw::c_int,
                           count: ::std::os::raw::c_int,
                           item_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_callback(arg1: *mut Struct_nk_context,
                             item_getter:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void,
                                                                            arg2:
                                                                                ::std::os::raw::c_int,
                                                                            arg3:
                                                                                *mut *const ::std::os::raw::c_char)>,
                             userdata: *mut ::std::os::raw::c_void,
                             selected: ::std::os::raw::c_int,
                             count: ::std::os::raw::c_int,
                             item_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combobox(arg1: *mut Struct_nk_context,
                       items: *mut *const ::std::os::raw::c_char,
                       count: ::std::os::raw::c_int,
                       selected: *mut ::std::os::raw::c_int,
                       item_height: ::std::os::raw::c_int);
    pub fn nk_combobox_string(arg1: *mut Struct_nk_context,
                              items_seperated_by_zeros:
                                  *const ::std::os::raw::c_char,
                              selected: *mut ::std::os::raw::c_int,
                              count: ::std::os::raw::c_int,
                              item_height: ::std::os::raw::c_int);
    pub fn nk_combobox_seperator(arg1: *mut Struct_nk_context,
                                 items_seperated_by_seperator:
                                     *const ::std::os::raw::c_char,
                                 seperator: ::std::os::raw::c_int,
                                 selected: *mut ::std::os::raw::c_int,
                                 count: ::std::os::raw::c_int,
                                 item_height: ::std::os::raw::c_int);
    pub fn nk_combobox_callback(arg1: *mut Struct_nk_context,
                                item_getter:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut ::std::os::raw::c_void,
                                                                               arg2:
                                                                                   ::std::os::raw::c_int,
                                                                               arg3:
                                                                                   *mut *const ::std::os::raw::c_char)>,
                                arg2: *mut ::std::os::raw::c_void,
                                selected: *mut ::std::os::raw::c_int,
                                count: ::std::os::raw::c_int,
                                item_height: ::std::os::raw::c_int);
    pub fn nk_combo_begin_text(arg1: *mut Struct_nk_context,
                               arg2: *mut Struct_nk_panel,
                               selected: *const ::std::os::raw::c_char,
                               arg3: ::std::os::raw::c_int,
                               max_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_label(arg1: *mut Struct_nk_context,
                                arg2: *mut Struct_nk_panel,
                                selected: *const ::std::os::raw::c_char,
                                max_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_color(arg1: *mut Struct_nk_context,
                                arg2: *mut Struct_nk_panel,
                                color: Struct_nk_color,
                                max_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_symbol(arg1: *mut Struct_nk_context,
                                 arg2: *mut Struct_nk_panel,
                                 arg3: Enum_nk_symbol_type,
                                 max_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_symbol_label(arg1: *mut Struct_nk_context,
                                       arg2: *mut Struct_nk_panel,
                                       selected:
                                           *const ::std::os::raw::c_char,
                                       arg3: Enum_nk_symbol_type,
                                       height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_symbol_text(arg1: *mut Struct_nk_context,
                                      arg2: *mut Struct_nk_panel,
                                      selected: *const ::std::os::raw::c_char,
                                      arg3: ::std::os::raw::c_int,
                                      arg4: Enum_nk_symbol_type,
                                      height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_image(arg1: *mut Struct_nk_context,
                                arg2: *mut Struct_nk_panel,
                                img: Struct_nk_image,
                                max_height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_image_label(arg1: *mut Struct_nk_context,
                                      arg2: *mut Struct_nk_panel,
                                      selected: *const ::std::os::raw::c_char,
                                      arg3: Struct_nk_image,
                                      height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_image_text(arg1: *mut Struct_nk_context,
                                     arg2: *mut Struct_nk_panel,
                                     selected: *const ::std::os::raw::c_char,
                                     arg3: ::std::os::raw::c_int,
                                     arg4: Struct_nk_image,
                                     height: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_label(arg1: *mut Struct_nk_context,
                               arg2: *const ::std::os::raw::c_char,
                               alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_combo_item_text(arg1: *mut Struct_nk_context,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: ::std::os::raw::c_int,
                              alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_combo_item_image_label(arg1: *mut Struct_nk_context,
                                     arg2: Struct_nk_image,
                                     arg3: *const ::std::os::raw::c_char,
                                     alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_image_text(arg1: *mut Struct_nk_context,
                                    arg2: Struct_nk_image,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_symbol_label(arg1: *mut Struct_nk_context,
                                      arg2: Enum_nk_symbol_type,
                                      arg3: *const ::std::os::raw::c_char,
                                      alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_symbol_text(arg1: *mut Struct_nk_context,
                                     arg2: Enum_nk_symbol_type,
                                     arg3: *const ::std::os::raw::c_char,
                                     arg4: ::std::os::raw::c_int,
                                     alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_close(arg1: *mut Struct_nk_context);
    pub fn nk_combo_end(arg1: *mut Struct_nk_context);
    pub fn nk_contextual_begin(arg1: *mut Struct_nk_context,
                               arg2: *mut Struct_nk_panel, arg3: nk_flags,
                               arg4: Struct_nk_vec2,
                               trigger_bounds: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_text(arg1: *mut Struct_nk_context,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int,
                                   align: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_label(arg1: *mut Struct_nk_context,
                                    arg2: *const ::std::os::raw::c_char,
                                    align: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_image_label(arg1: *mut Struct_nk_context,
                                          arg2: Struct_nk_image,
                                          arg3: *const ::std::os::raw::c_char,
                                          alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_image_text(arg1: *mut Struct_nk_context,
                                         arg2: Struct_nk_image,
                                         arg3: *const ::std::os::raw::c_char,
                                         len: ::std::os::raw::c_int,
                                         alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_symbol_label(arg1: *mut Struct_nk_context,
                                           arg2: Enum_nk_symbol_type,
                                           arg3:
                                               *const ::std::os::raw::c_char,
                                           alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_symbol_text(arg1: *mut Struct_nk_context,
                                          arg2: Enum_nk_symbol_type,
                                          arg3: *const ::std::os::raw::c_char,
                                          arg4: ::std::os::raw::c_int,
                                          alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_close(arg1: *mut Struct_nk_context);
    pub fn nk_contextual_end(arg1: *mut Struct_nk_context);
    pub fn nk_tooltip(arg1: *mut Struct_nk_context,
                      arg2: *const ::std::os::raw::c_char);
    pub fn nk_tooltip_begin(arg1: *mut Struct_nk_context,
                            arg2: *mut Struct_nk_panel,
                            width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_tooltip_end(arg1: *mut Struct_nk_context);
    pub fn nk_menubar_begin(arg1: *mut Struct_nk_context);
    pub fn nk_menubar_end(arg1: *mut Struct_nk_context);
    pub fn nk_menu_begin_text(arg1: *mut Struct_nk_context,
                              arg2: *mut Struct_nk_panel,
                              arg3: *const ::std::os::raw::c_char,
                              arg4: ::std::os::raw::c_int, align: nk_flags,
                              width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_label(arg1: *mut Struct_nk_context,
                               arg2: *mut Struct_nk_panel,
                               arg3: *const ::std::os::raw::c_char,
                               align: nk_flags,
                               width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_image(arg1: *mut Struct_nk_context,
                               arg2: *mut Struct_nk_panel,
                               arg3: *const ::std::os::raw::c_char,
                               arg4: Struct_nk_image,
                               width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_image_text(arg1: *mut Struct_nk_context,
                                    arg2: *mut Struct_nk_panel,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    align: nk_flags, arg5: Struct_nk_image,
                                    width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_image_label(arg1: *mut Struct_nk_context,
                                     arg2: *mut Struct_nk_panel,
                                     arg3: *const ::std::os::raw::c_char,
                                     align: nk_flags, arg4: Struct_nk_image,
                                     width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_symbol(arg1: *mut Struct_nk_context,
                                arg2: *mut Struct_nk_panel,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: Enum_nk_symbol_type,
                                width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_symbol_text(arg1: *mut Struct_nk_context,
                                     arg2: *mut Struct_nk_panel,
                                     arg3: *const ::std::os::raw::c_char,
                                     arg4: ::std::os::raw::c_int,
                                     align: nk_flags,
                                     arg5: Enum_nk_symbol_type,
                                     width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_symbol_label(arg1: *mut Struct_nk_context,
                                      arg2: *mut Struct_nk_panel,
                                      arg3: *const ::std::os::raw::c_char,
                                      align: nk_flags,
                                      arg4: Enum_nk_symbol_type,
                                      width: ::std::os::raw::c_float)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_text(arg1: *mut Struct_nk_context,
                             arg2: *const ::std::os::raw::c_char,
                             arg3: ::std::os::raw::c_int, align: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_label(arg1: *mut Struct_nk_context,
                              arg2: *const ::std::os::raw::c_char,
                              alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_menu_item_image_label(arg1: *mut Struct_nk_context,
                                    arg2: Struct_nk_image,
                                    arg3: *const ::std::os::raw::c_char,
                                    alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_image_text(arg1: *mut Struct_nk_context,
                                   arg2: Struct_nk_image,
                                   arg3: *const ::std::os::raw::c_char,
                                   len: ::std::os::raw::c_int,
                                   alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_symbol_text(arg1: *mut Struct_nk_context,
                                    arg2: Enum_nk_symbol_type,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_symbol_label(arg1: *mut Struct_nk_context,
                                     arg2: Enum_nk_symbol_type,
                                     arg3: *const ::std::os::raw::c_char,
                                     alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_close(arg1: *mut Struct_nk_context);
    pub fn nk_menu_end(arg1: *mut Struct_nk_context);
    pub fn nk_input_begin(arg1: *mut Struct_nk_context);
    pub fn nk_input_motion(arg1: *mut Struct_nk_context,
                           x: ::std::os::raw::c_int,
                           y: ::std::os::raw::c_int);
    pub fn nk_input_key(arg1: *mut Struct_nk_context, arg2: Enum_nk_keys,
                        down: ::std::os::raw::c_int);
    pub fn nk_input_button(arg1: *mut Struct_nk_context,
                           arg2: Enum_nk_buttons, x: ::std::os::raw::c_int,
                           y: ::std::os::raw::c_int,
                           down: ::std::os::raw::c_int);
    pub fn nk_input_scroll(arg1: *mut Struct_nk_context,
                           y: ::std::os::raw::c_float);
    pub fn nk_input_char(arg1: *mut Struct_nk_context,
                         arg2: ::std::os::raw::c_char);
    pub fn nk_input_glyph(arg1: *mut Struct_nk_context, arg2: nk_glyph);
    pub fn nk_input_unicode(arg1: *mut Struct_nk_context, arg2: nk_rune);
    pub fn nk_input_end(arg1: *mut Struct_nk_context);
    pub fn nk_style_default(arg1: *mut Struct_nk_context);
    pub fn nk_style_from_table(arg1: *mut Struct_nk_context,
                               arg2: *const Struct_nk_color);
    pub fn nk_style_color_name(arg1: Enum_nk_style_colors)
     -> *const ::std::os::raw::c_char;
    pub fn nk_style_set_font(arg1: *mut Struct_nk_context,
                             arg2: *const Struct_nk_user_font);
    pub fn nk_widget_bounds(arg1: *mut Struct_nk_context) -> Struct_nk_rect;
    pub fn nk_widget_position(arg1: *mut Struct_nk_context) -> Struct_nk_vec2;
    pub fn nk_widget_size(arg1: *mut Struct_nk_context) -> Struct_nk_vec2;
    pub fn nk_widget_is_hovered(arg1: *mut Struct_nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_widget_is_mouse_clicked(arg1: *mut Struct_nk_context,
                                      arg2: Enum_nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_widget_has_mouse_click_down(arg1: *mut Struct_nk_context,
                                          arg2: Enum_nk_buttons,
                                          down: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_spacing(arg1: *mut Struct_nk_context,
                      cols: ::std::os::raw::c_int);
    pub fn nk_widget(arg1: *mut Struct_nk_rect,
                     arg2: *const Struct_nk_context)
     -> Enum_nk_widget_layout_states;
    pub fn nk_widget_fitting(arg1: *mut Struct_nk_rect,
                             arg2: *mut Struct_nk_context,
                             arg3: Struct_nk_vec2)
     -> Enum_nk_widget_layout_states;
    pub fn nk_rgb(r: ::std::os::raw::c_int, g: ::std::os::raw::c_int,
                  b: ::std::os::raw::c_int) -> Struct_nk_color;
    pub fn nk_rgb_iv(rgb: *const ::std::os::raw::c_int) -> Struct_nk_color;
    pub fn nk_rgb_bv(rgb: *const nk_byte) -> Struct_nk_color;
    pub fn nk_rgb_f(r: ::std::os::raw::c_float, g: ::std::os::raw::c_float,
                    b: ::std::os::raw::c_float) -> Struct_nk_color;
    pub fn nk_rgb_fv(rgb: *const ::std::os::raw::c_float) -> Struct_nk_color;
    pub fn nk_rgb_hex(rgb: *const ::std::os::raw::c_char) -> Struct_nk_color;
    pub fn nk_rgba(r: ::std::os::raw::c_int, g: ::std::os::raw::c_int,
                   b: ::std::os::raw::c_int, a: ::std::os::raw::c_int)
     -> Struct_nk_color;
    pub fn nk_rgba_u32(arg1: nk_uint) -> Struct_nk_color;
    pub fn nk_rgba_iv(rgba: *const ::std::os::raw::c_int) -> Struct_nk_color;
    pub fn nk_rgba_bv(rgba: *const nk_byte) -> Struct_nk_color;
    pub fn nk_rgba_f(r: ::std::os::raw::c_float, g: ::std::os::raw::c_float,
                     b: ::std::os::raw::c_float, a: ::std::os::raw::c_float)
     -> Struct_nk_color;
    pub fn nk_rgba_fv(rgba: *const ::std::os::raw::c_float)
     -> Struct_nk_color;
    pub fn nk_rgba_hex(rgb: *const ::std::os::raw::c_char) -> Struct_nk_color;
    pub fn nk_hsv(h: ::std::os::raw::c_int, s: ::std::os::raw::c_int,
                  v: ::std::os::raw::c_int) -> Struct_nk_color;
    pub fn nk_hsv_iv(hsv: *const ::std::os::raw::c_int) -> Struct_nk_color;
    pub fn nk_hsv_bv(hsv: *const nk_byte) -> Struct_nk_color;
    pub fn nk_hsv_f(h: ::std::os::raw::c_float, s: ::std::os::raw::c_float,
                    v: ::std::os::raw::c_float) -> Struct_nk_color;
    pub fn nk_hsv_fv(hsv: *const ::std::os::raw::c_float) -> Struct_nk_color;
    pub fn nk_hsva(h: ::std::os::raw::c_int, s: ::std::os::raw::c_int,
                   v: ::std::os::raw::c_int, a: ::std::os::raw::c_int)
     -> Struct_nk_color;
    pub fn nk_hsva_iv(hsva: *const ::std::os::raw::c_int) -> Struct_nk_color;
    pub fn nk_hsva_bv(hsva: *const nk_byte) -> Struct_nk_color;
    pub fn nk_hsva_f(h: ::std::os::raw::c_float, s: ::std::os::raw::c_float,
                     v: ::std::os::raw::c_float, a: ::std::os::raw::c_float)
     -> Struct_nk_color;
    pub fn nk_hsva_fv(hsva: *const ::std::os::raw::c_float)
     -> Struct_nk_color;
    pub fn nk_color_f(r: *mut ::std::os::raw::c_float,
                      g: *mut ::std::os::raw::c_float,
                      b: *mut ::std::os::raw::c_float,
                      a: *mut ::std::os::raw::c_float, arg1: Struct_nk_color);
    pub fn nk_color_fv(rgba_out: *mut ::std::os::raw::c_float,
                       arg1: Struct_nk_color);
    pub fn nk_color_u32(arg1: Struct_nk_color) -> nk_uint;
    pub fn nk_color_hex_rgba(output: *mut ::std::os::raw::c_char,
                             arg1: Struct_nk_color);
    pub fn nk_color_hex_rgb(output: *mut ::std::os::raw::c_char,
                            arg1: Struct_nk_color);
    pub fn nk_color_hsv_i(out_h: *mut ::std::os::raw::c_int,
                          out_s: *mut ::std::os::raw::c_int,
                          out_v: *mut ::std::os::raw::c_int,
                          arg1: Struct_nk_color);
    pub fn nk_color_hsv_b(out_h: *mut nk_byte, out_s: *mut nk_byte,
                          out_v: *mut nk_byte, arg1: Struct_nk_color);
    pub fn nk_color_hsv_iv(hsv_out: *mut ::std::os::raw::c_int,
                           arg1: Struct_nk_color);
    pub fn nk_color_hsv_bv(hsv_out: *mut nk_byte, arg1: Struct_nk_color);
    pub fn nk_color_hsv_f(out_h: *mut ::std::os::raw::c_float,
                          out_s: *mut ::std::os::raw::c_float,
                          out_v: *mut ::std::os::raw::c_float,
                          arg1: Struct_nk_color);
    pub fn nk_color_hsv_fv(hsv_out: *mut ::std::os::raw::c_float,
                           arg1: Struct_nk_color);
    pub fn nk_color_hsva_i(h: *mut ::std::os::raw::c_int,
                           s: *mut ::std::os::raw::c_int,
                           v: *mut ::std::os::raw::c_int,
                           a: *mut ::std::os::raw::c_int,
                           arg1: Struct_nk_color);
    pub fn nk_color_hsva_b(h: *mut nk_byte, s: *mut nk_byte, v: *mut nk_byte,
                           a: *mut nk_byte, arg1: Struct_nk_color);
    pub fn nk_color_hsva_iv(hsva_out: *mut ::std::os::raw::c_int,
                            arg1: Struct_nk_color);
    pub fn nk_color_hsva_bv(hsva_out: *mut nk_byte, arg1: Struct_nk_color);
    pub fn nk_color_hsva_f(out_h: *mut ::std::os::raw::c_float,
                           out_s: *mut ::std::os::raw::c_float,
                           out_v: *mut ::std::os::raw::c_float,
                           out_a: *mut ::std::os::raw::c_float,
                           arg1: Struct_nk_color);
    pub fn nk_color_hsva_fv(hsva_out: *mut ::std::os::raw::c_float,
                            arg1: Struct_nk_color);
    pub fn nk_handle_ptr(arg1: *mut ::std::os::raw::c_void) -> nk_handle;
    pub fn nk_handle_id(arg1: ::std::os::raw::c_int) -> nk_handle;
    pub fn nk_image_ptr(arg1: *mut ::std::os::raw::c_void) -> Struct_nk_image;
    pub fn nk_image_id(arg1: ::std::os::raw::c_int) -> Struct_nk_image;
    pub fn nk_image_is_subimage(img: *const Struct_nk_image)
     -> ::std::os::raw::c_int;
    pub fn nk_subimage_ptr(arg1: *mut ::std::os::raw::c_void,
                           w: ::std::os::raw::c_ushort,
                           h: ::std::os::raw::c_ushort,
                           sub_region: Struct_nk_rect) -> Struct_nk_image;
    pub fn nk_subimage_id(arg1: ::std::os::raw::c_int,
                          w: ::std::os::raw::c_ushort,
                          h: ::std::os::raw::c_ushort,
                          sub_region: Struct_nk_rect) -> Struct_nk_image;
    pub fn nk_murmur_hash(key: *const ::std::os::raw::c_void,
                          len: ::std::os::raw::c_int, seed: nk_hash)
     -> nk_hash;
    pub fn nk_triangle_from_direction(result: *mut Struct_nk_vec2,
                                      r: Struct_nk_rect,
                                      pad_x: ::std::os::raw::c_float,
                                      pad_y: ::std::os::raw::c_float,
                                      arg1: Enum_nk_heading);
    pub fn nk_vec2(x: ::std::os::raw::c_float, y: ::std::os::raw::c_float)
     -> Struct_nk_vec2;
    pub fn nk_vec2i(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)
     -> Struct_nk_vec2;
    pub fn nk_vec2v(xy: *const ::std::os::raw::c_float) -> Struct_nk_vec2;
    pub fn nk_vec2iv(xy: *const ::std::os::raw::c_int) -> Struct_nk_vec2;
    pub fn nk_get_null_rect() -> Struct_nk_rect;
    pub fn nk_rect(x: ::std::os::raw::c_float, y: ::std::os::raw::c_float,
                   w: ::std::os::raw::c_float, h: ::std::os::raw::c_float)
     -> Struct_nk_rect;
    pub fn nk_recti(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int, h: ::std::os::raw::c_int)
     -> Struct_nk_rect;
    pub fn nk_recta(pos: Struct_nk_vec2, size: Struct_nk_vec2)
     -> Struct_nk_rect;
    pub fn nk_rectv(xywh: *const ::std::os::raw::c_float) -> Struct_nk_rect;
    pub fn nk_rectiv(xywh: *const ::std::os::raw::c_int) -> Struct_nk_rect;
    pub fn nk_strlen(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_stricmp(s1: *const ::std::os::raw::c_char,
                      s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_stricmpn(s1: *const ::std::os::raw::c_char,
                       s2: *const ::std::os::raw::c_char,
                       n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nk_strtof(number: *mut ::std::os::raw::c_float,
                     buffer: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_strfilter(text: *const ::std::os::raw::c_char,
                        regexp: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_strmatch_fuzzy_string(str: *const ::std::os::raw::c_char,
                                    pattern: *const ::std::os::raw::c_char,
                                    out_score: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_strmatch_fuzzy_text(txt: *const ::std::os::raw::c_char,
                                  txt_len: ::std::os::raw::c_int,
                                  pattern: *const ::std::os::raw::c_char,
                                  out_score: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_decode(arg1: *const ::std::os::raw::c_char,
                         arg2: *mut nk_rune, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_encode(arg1: nk_rune, arg2: *mut ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_len(arg1: *const ::std::os::raw::c_char,
                      byte_len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_at(buffer: *const ::std::os::raw::c_char,
                     length: ::std::os::raw::c_int,
                     index: ::std::os::raw::c_int, unicode: *mut nk_rune,
                     len: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn nk_buffer_init(arg1: *mut Struct_nk_buffer,
                          arg2: *const Struct_nk_allocator, size: nk_size);
    pub fn nk_buffer_init_fixed(arg1: *mut Struct_nk_buffer,
                                memory: *mut ::std::os::raw::c_void,
                                size: nk_size);
    pub fn nk_buffer_info(arg1: *mut Struct_nk_memory_status,
                          arg2: *mut Struct_nk_buffer);
    pub fn nk_buffer_push(arg1: *mut Struct_nk_buffer,
                          _type: Enum_nk_buffer_allocation_type,
                          memory: *mut ::std::os::raw::c_void, size: nk_size,
                          align: nk_size);
    pub fn nk_buffer_mark(arg1: *mut Struct_nk_buffer,
                          _type: Enum_nk_buffer_allocation_type);
    pub fn nk_buffer_reset(arg1: *mut Struct_nk_buffer,
                           _type: Enum_nk_buffer_allocation_type);
    pub fn nk_buffer_clear(arg1: *mut Struct_nk_buffer);
    pub fn nk_buffer_free(arg1: *mut Struct_nk_buffer);
    pub fn nk_buffer_memory(arg1: *mut Struct_nk_buffer)
     -> *mut ::std::os::raw::c_void;
    pub fn nk_buffer_memory_const(arg1: *const Struct_nk_buffer)
     -> *const ::std::os::raw::c_void;
    pub fn nk_buffer_total(arg1: *mut Struct_nk_buffer) -> nk_size;
    pub fn nk_str_init(arg1: *mut Struct_nk_str,
                       arg2: *const Struct_nk_allocator, size: nk_size);
    pub fn nk_str_init_fixed(arg1: *mut Struct_nk_str,
                             memory: *mut ::std::os::raw::c_void,
                             size: nk_size);
    pub fn nk_str_clear(arg1: *mut Struct_nk_str);
    pub fn nk_str_free(arg1: *mut Struct_nk_str);
    pub fn nk_str_append_text_char(arg1: *mut Struct_nk_str,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_str_char(arg1: *mut Struct_nk_str,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_text_utf8(arg1: *mut Struct_nk_str,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_str_utf8(arg1: *mut Struct_nk_str,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_text_runes(arg1: *mut Struct_nk_str,
                                    arg2: *const nk_rune,
                                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_str_runes(arg1: *mut Struct_nk_str,
                                   arg2: *const nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_at_char(arg1: *mut Struct_nk_str,
                                 pos: ::std::os::raw::c_int,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_at_rune(arg1: *mut Struct_nk_str,
                                 pos: ::std::os::raw::c_int,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_text_char(arg1: *mut Struct_nk_str,
                                   pos: ::std::os::raw::c_int,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_str_char(arg1: *mut Struct_nk_str,
                                  pos: ::std::os::raw::c_int,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_text_utf8(arg1: *mut Struct_nk_str,
                                   pos: ::std::os::raw::c_int,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_str_utf8(arg1: *mut Struct_nk_str,
                                  pos: ::std::os::raw::c_int,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_text_runes(arg1: *mut Struct_nk_str,
                                    pos: ::std::os::raw::c_int,
                                    arg2: *const nk_rune,
                                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_str_runes(arg1: *mut Struct_nk_str,
                                   pos: ::std::os::raw::c_int,
                                   arg2: *const nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_str_remove_chars(arg1: *mut Struct_nk_str,
                               len: ::std::os::raw::c_int);
    pub fn nk_str_remove_runes(str: *mut Struct_nk_str,
                               len: ::std::os::raw::c_int);
    pub fn nk_str_delete_chars(arg1: *mut Struct_nk_str,
                               pos: ::std::os::raw::c_int,
                               len: ::std::os::raw::c_int);
    pub fn nk_str_delete_runes(arg1: *mut Struct_nk_str,
                               pos: ::std::os::raw::c_int,
                               len: ::std::os::raw::c_int);
    pub fn nk_str_at_char(arg1: *mut Struct_nk_str,
                          pos: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn nk_str_at_rune(arg1: *mut Struct_nk_str,
                          pos: ::std::os::raw::c_int, unicode: *mut nk_rune,
                          len: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn nk_str_rune_at(arg1: *const Struct_nk_str,
                          pos: ::std::os::raw::c_int) -> nk_rune;
    pub fn nk_str_at_char_const(arg1: *const Struct_nk_str,
                                pos: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn nk_str_at_const(arg1: *const Struct_nk_str,
                           pos: ::std::os::raw::c_int, unicode: *mut nk_rune,
                           len: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn nk_str_get(arg1: *mut Struct_nk_str)
     -> *mut ::std::os::raw::c_char;
    pub fn nk_str_get_const(arg1: *const Struct_nk_str)
     -> *const ::std::os::raw::c_char;
    pub fn nk_str_len(arg1: *mut Struct_nk_str) -> ::std::os::raw::c_int;
    pub fn nk_str_len_char(arg1: *mut Struct_nk_str) -> ::std::os::raw::c_int;
    pub fn nk_filter_default(arg1: *const Struct_nk_text_edit,
                             unicode: nk_rune) -> ::std::os::raw::c_int;
    pub fn nk_filter_ascii(arg1: *const Struct_nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_float(arg1: *const Struct_nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_decimal(arg1: *const Struct_nk_text_edit,
                             unicode: nk_rune) -> ::std::os::raw::c_int;
    pub fn nk_filter_hex(arg1: *const Struct_nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_oct(arg1: *const Struct_nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_binary(arg1: *const Struct_nk_text_edit,
                            unicode: nk_rune) -> ::std::os::raw::c_int;
    pub fn nk_textedit_init(arg1: *mut Struct_nk_text_edit,
                            arg2: *mut Struct_nk_allocator, size: nk_size);
    pub fn nk_textedit_init_fixed(arg1: *mut Struct_nk_text_edit,
                                  memory: *mut ::std::os::raw::c_void,
                                  size: nk_size);
    pub fn nk_textedit_free(arg1: *mut Struct_nk_text_edit);
    pub fn nk_textedit_text(arg1: *mut Struct_nk_text_edit,
                            arg2: *const ::std::os::raw::c_char,
                            total_len: ::std::os::raw::c_int);
    pub fn nk_textedit_delete(arg1: *mut Struct_nk_text_edit,
                              _where: ::std::os::raw::c_int,
                              len: ::std::os::raw::c_int);
    pub fn nk_textedit_delete_selection(arg1: *mut Struct_nk_text_edit);
    pub fn nk_textedit_select_all(arg1: *mut Struct_nk_text_edit);
    pub fn nk_textedit_cut(arg1: *mut Struct_nk_text_edit)
     -> ::std::os::raw::c_int;
    pub fn nk_textedit_paste(arg1: *mut Struct_nk_text_edit,
                             arg2: *const ::std::os::raw::c_char,
                             len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_textedit_undo(arg1: *mut Struct_nk_text_edit);
    pub fn nk_textedit_redo(arg1: *mut Struct_nk_text_edit);
    pub fn nk_stroke_line(b: *mut Struct_nk_command_buffer,
                          x0: ::std::os::raw::c_float,
                          y0: ::std::os::raw::c_float,
                          x1: ::std::os::raw::c_float,
                          y1: ::std::os::raw::c_float,
                          line_thickness: ::std::os::raw::c_float,
                          arg1: Struct_nk_color);
    pub fn nk_stroke_curve(arg1: *mut Struct_nk_command_buffer,
                           arg2: ::std::os::raw::c_float,
                           arg3: ::std::os::raw::c_float,
                           arg4: ::std::os::raw::c_float,
                           arg5: ::std::os::raw::c_float,
                           arg6: ::std::os::raw::c_float,
                           arg7: ::std::os::raw::c_float,
                           arg8: ::std::os::raw::c_float,
                           arg9: ::std::os::raw::c_float,
                           line_thickness: ::std::os::raw::c_float,
                           arg10: Struct_nk_color);
    pub fn nk_stroke_rect(arg1: *mut Struct_nk_command_buffer,
                          arg2: Struct_nk_rect,
                          rounding: ::std::os::raw::c_float,
                          line_thickness: ::std::os::raw::c_float,
                          arg3: Struct_nk_color);
    pub fn nk_stroke_circle(arg1: *mut Struct_nk_command_buffer,
                            arg2: Struct_nk_rect,
                            line_thickness: ::std::os::raw::c_float,
                            arg3: Struct_nk_color);
    pub fn nk_stroke_arc(arg1: *mut Struct_nk_command_buffer,
                         cx: ::std::os::raw::c_float,
                         cy: ::std::os::raw::c_float,
                         radius: ::std::os::raw::c_float,
                         a_min: ::std::os::raw::c_float,
                         a_max: ::std::os::raw::c_float,
                         line_thickness: ::std::os::raw::c_float,
                         arg2: Struct_nk_color);
    pub fn nk_stroke_triangle(arg1: *mut Struct_nk_command_buffer,
                              arg2: ::std::os::raw::c_float,
                              arg3: ::std::os::raw::c_float,
                              arg4: ::std::os::raw::c_float,
                              arg5: ::std::os::raw::c_float,
                              arg6: ::std::os::raw::c_float,
                              arg7: ::std::os::raw::c_float,
                              line_thichness: ::std::os::raw::c_float,
                              arg8: Struct_nk_color);
    pub fn nk_stroke_polyline(arg1: *mut Struct_nk_command_buffer,
                              points: *mut ::std::os::raw::c_float,
                              point_count: ::std::os::raw::c_int,
                              line_thickness: ::std::os::raw::c_float,
                              col: Struct_nk_color);
    pub fn nk_stroke_polygon(arg1: *mut Struct_nk_command_buffer,
                             arg2: *mut ::std::os::raw::c_float,
                             point_count: ::std::os::raw::c_int,
                             line_thickness: ::std::os::raw::c_float,
                             arg3: Struct_nk_color);
    pub fn nk_fill_rect(arg1: *mut Struct_nk_command_buffer,
                        arg2: Struct_nk_rect,
                        rounding: ::std::os::raw::c_float,
                        arg3: Struct_nk_color);
    pub fn nk_fill_rect_multi_color(arg1: *mut Struct_nk_command_buffer,
                                    arg2: Struct_nk_rect,
                                    left: Struct_nk_color,
                                    top: Struct_nk_color,
                                    right: Struct_nk_color,
                                    bottom: Struct_nk_color);
    pub fn nk_fill_circle(arg1: *mut Struct_nk_command_buffer,
                          arg2: Struct_nk_rect, arg3: Struct_nk_color);
    pub fn nk_fill_arc(arg1: *mut Struct_nk_command_buffer,
                       cx: ::std::os::raw::c_float,
                       cy: ::std::os::raw::c_float,
                       radius: ::std::os::raw::c_float,
                       a_min: ::std::os::raw::c_float,
                       a_max: ::std::os::raw::c_float, arg2: Struct_nk_color);
    pub fn nk_fill_triangle(arg1: *mut Struct_nk_command_buffer,
                            x0: ::std::os::raw::c_float,
                            y0: ::std::os::raw::c_float,
                            x1: ::std::os::raw::c_float,
                            y1: ::std::os::raw::c_float,
                            x2: ::std::os::raw::c_float,
                            y2: ::std::os::raw::c_float,
                            arg2: Struct_nk_color);
    pub fn nk_fill_polygon(arg1: *mut Struct_nk_command_buffer,
                           arg2: *mut ::std::os::raw::c_float,
                           point_count: ::std::os::raw::c_int,
                           arg3: Struct_nk_color);
    pub fn nk_push_scissor(arg1: *mut Struct_nk_command_buffer,
                           arg2: Struct_nk_rect);
    pub fn nk_draw_image(arg1: *mut Struct_nk_command_buffer,
                         arg2: Struct_nk_rect, arg3: *const Struct_nk_image);
    pub fn nk_draw_text(arg1: *mut Struct_nk_command_buffer,
                        arg2: Struct_nk_rect,
                        text: *const ::std::os::raw::c_char,
                        len: ::std::os::raw::c_int,
                        arg3: *const Struct_nk_user_font,
                        arg4: Struct_nk_color, arg5: Struct_nk_color);
    pub fn nk__next(arg1: *mut Struct_nk_context,
                    arg2: *const Struct_nk_command)
     -> *const Struct_nk_command;
    pub fn nk__begin(arg1: *mut Struct_nk_context)
     -> *const Struct_nk_command;
    pub fn nk_input_has_mouse_click_in_rect(arg1: *const Struct_nk_input,
                                            arg2: Enum_nk_buttons,
                                            arg3: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_has_mouse_click_down_in_rect(arg1: *const Struct_nk_input,
                                                 arg2: Enum_nk_buttons,
                                                 arg3: Struct_nk_rect,
                                                 down: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_click_in_rect(arg1: *const Struct_nk_input,
                                           arg2: Enum_nk_buttons,
                                           arg3: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_click_down_in_rect(i: *const Struct_nk_input,
                                                id: Enum_nk_buttons,
                                                b: Struct_nk_rect,
                                                down: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_input_any_mouse_click_in_rect(arg1: *const Struct_nk_input,
                                            arg2: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_prev_hovering_rect(arg1: *const Struct_nk_input,
                                                arg2: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_hovering_rect(arg1: *const Struct_nk_input,
                                           arg2: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_mouse_clicked(arg1: *const Struct_nk_input,
                                  arg2: Enum_nk_buttons, arg3: Struct_nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_down(arg1: *const Struct_nk_input,
                                  arg2: Enum_nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_pressed(arg1: *const Struct_nk_input,
                                     arg2: Enum_nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_released(arg1: *const Struct_nk_input,
                                      arg2: Enum_nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_key_pressed(arg1: *const Struct_nk_input,
                                   arg2: Enum_nk_keys)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_key_released(arg1: *const Struct_nk_input,
                                    arg2: Enum_nk_keys)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_key_down(arg1: *const Struct_nk_input,
                                arg2: Enum_nk_keys) -> ::std::os::raw::c_int;
    pub fn nk_style_item_image(img: Struct_nk_image) -> Struct_nk_style_item;
    pub fn nk_style_item_color(arg1: Struct_nk_color) -> Struct_nk_style_item;
    pub fn nk_style_item_hide() -> Struct_nk_style_item;
}
